package secure_pacs_simulator;


import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Path;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import static secure_pacs_simulator.RSAAlgorithm.encrypt;

public class Main extends javax.swing.JFrame {
    
    String lfsr_key = null;
//    List<String> userList = new ArrayList<String>();
    final int  USER_LENGTH = 3;
    ArrayList<String>[] userList = new ArrayList[USER_LENGTH];
    String dicom_file_path = null;
    String enctypted_dicom_file_path = null;
//    ArrayList<byte[]> cipher_lfsr_key = new ArrayList<byte[]>();
    String[] cipher_lfsr_key_list = new String[USER_LENGTH];
    
    
    /** Creates new form Find */
    public Main() {
        initComponents();
//        jFileChooser1.setVisible(false);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbGenerateUser = new javax.swing.JButton();
        jBPickDicomFile = new javax.swing.JButton();
        lbFilePathString = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTxtUserlist = new javax.swing.JTextArea();
        jButtonEncryptDICOM = new javax.swing.JButton();
        jBtnSaveEncryptedFileDB = new javax.swing.JButton();
        jLbSystemStatus = new javax.swing.JLabel();
        jLbGenerateLFSR = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaLFSR_key = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLbKeygenTime = new javax.swing.JLabel();
        jLbKeyLength = new javax.swing.JLabel();
        jLbFileSize = new javax.swing.JLabel();
        jLbEncryptionTime = new javax.swing.JLabel();
        jLbTransferTime = new javax.swing.JLabel();
        jLbTransferTimeforLFSRforAllUsers = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLbEncryTimeforAllUsers = new javax.swing.JLabel();
        jLbFileSizeAfterEncrypted = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Secure PACS Controller Interface");

        jbGenerateUser.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jbGenerateUser.setText("Generate User");
        jbGenerateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGenerateUserActionPerformed(evt);
            }
        });

        jBPickDicomFile.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBPickDicomFile.setText("Pick a DICOM File");
        jBPickDicomFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPickDicomFileActionPerformed(evt);
            }
        });

        lbFilePathString.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbFilePathString.setText(".");

        jTxtUserlist.setColumns(20);
        jTxtUserlist.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTxtUserlist.setRows(5);
        jScrollPane1.setViewportView(jTxtUserlist);

        jButtonEncryptDICOM.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButtonEncryptDICOM.setText("Encrypt DICOM File");
        jButtonEncryptDICOM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEncryptDICOMActionPerformed(evt);
            }
        });

        jBtnSaveEncryptedFileDB.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jBtnSaveEncryptedFileDB.setText("Save Encrypted File to DB");
        jBtnSaveEncryptedFileDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSaveEncryptedFileDBActionPerformed(evt);
            }
        });

        jLbSystemStatus.setText("Waiting ...");

        jLbGenerateLFSR.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLbGenerateLFSR.setText("Generate LFSR Key");
        jLbGenerateLFSR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLbGenerateLFSRActionPerformed(evt);
            }
        });

        jTextAreaLFSR_key.setEditable(false);
        jTextAreaLFSR_key.setColumns(20);
        jTextAreaLFSR_key.setLineWrap(true);
        jTextAreaLFSR_key.setRows(5);
        jScrollPane2.setViewportView(jTextAreaLFSR_key);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Secure PACS Main Interface");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel2.setText("LFSR Key Length (bit): ");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel3.setText("DICOM File Size Before Encrypted:");

        jLabel19.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel19.setText("LFSR KeyGen Time (Millsec):");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel5.setText("DICOM file Encrypt Time (Millsec):");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel6.setText("Encrypted DICOM File Transfer Time (Millsec):");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel7.setText("Encrypted LFSR Transfer Time for All Users (Millsec):");

        jLbKeygenTime.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLbKeygenTime.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLbKeyLength.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLbKeyLength.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLbFileSize.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLbFileSize.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLbEncryptionTime.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLbEncryptionTime.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLbTransferTime.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLbTransferTime.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLbTransferTimeforLFSRforAllUsers.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLbTransferTimeforLFSRforAllUsers.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel4.setText("LFSR Key Encrypt Time for All Users (Millsec):");

        jLbEncryTimeforAllUsers.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLbEncryTimeforAllUsers.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLbFileSizeAfterEncrypted.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLbFileSizeAfterEncrypted.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel9.setText("DICOM File Size After Encrypted:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(406, 406, 406)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(61, 61, 61)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLbEncryptionTime, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                                    .addComponent(jLbTransferTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jBPickDicomFile, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jbGenerateUser, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(107, 107, 107)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLbGenerateLFSR, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGap(0, 0, Short.MAX_VALUE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(150, 150, 150))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jBtnSaveEncryptedFileDB, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLbSystemStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButtonEncryptDICOM, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(194, 194, 194)
                                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(150, 150, 150)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLbFileSizeAfterEncrypted, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                                    .addComponent(jLbFileSize, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLbKeygenTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLbKeyLength, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(lbFilePathString, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(272, 272, 272))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLbEncryTimeforAllUsers, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                                .addComponent(jLbTransferTimeforLFSRforAllUsers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLbGenerateLFSR, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbGenerateUser, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jBPickDicomFile, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLbKeygenTime, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLbKeyLength, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addComponent(lbFilePathString, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLbFileSize, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jButtonEncryptDICOM, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBtnSaveEncryptedFileDB, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLbFileSizeAfterEncrypted, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLbEncryptionTime, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLbTransferTime, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(16, 16, 16)))))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLbEncryTimeforAllUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLbTransferTimeforLFSRforAllUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(88, 88, 88)
                .addComponent(jLbSystemStatus)
                .addGap(17, 17, 17))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jBPickDicomFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPickDicomFileActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
//        System.out.print("Hiiiiiiii");
        
        String file_Ext = "";
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            File file = fileChooser.getSelectedFile();
            lbFilePathString.setText(file.getAbsolutePath());
            String file_path = file.getAbsolutePath();
            
            dicom_file_path = file.getAbsolutePath();
            jLbFileSize.setText(getFileSizeKiloBytes(file));
//            File file = new File(dicom_file_path);
//            if (!file.exists() || !file.isFile()) return;
            
//          FileReader file2 = new FileReader(file.getAbsolutePath());
//       try{}
//           
       }

        
    }//GEN-LAST:event_jBPickDicomFileActionPerformed

    private void jbGenerateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGenerateUserActionPerformed
        // TODO add your handling code here:
                    System.out.println("==================================================");
                    System.out.println("System Initializing .....");
                    
//                    int n = 3; 
//                    ArrayList<String>[] userList = new ArrayList[n];
                    // initializing
                    for (int i = 0; i < USER_LENGTH; i++) {
                        userList[i] = new ArrayList<String>();
                    }
                    
                    user user1 = new user("user1", "123");
                    user user2 = new user("user2", "123");
                    user user3 = new user("user3", "123");
                    RSAKeyPairGenerator rsa_k1 = null;
                    RSAKeyPairGenerator rsa_k2 = null;
                    RSAKeyPairGenerator rsa_k3 = null;
                try {
                    rsa_k1 = new RSAKeyPairGenerator();
                    rsa_k2 = new RSAKeyPairGenerator();
                    rsa_k3 = new RSAKeyPairGenerator();
//                    rsa1 = new RSA();
//                    rsa2 = new RSA();
//                    rsa3 = new RSA();
                } catch (Exception ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                    
                    String username1 = user1.getUsername();
                    String username2 = user2.getUsername();
                    String username3 = user3.getUsername();

                    // We can add any number of columns to each
                    // rows as per our wish
                    userList[0].add(username1);
                    userList[0].add(user1.getPassword());   
                    userList[1].add(username2);
                    userList[1].add(user2.getPassword());
                    userList[2].add(username3);
                    userList[2].add(user3.getPassword());  

        try {
//            rsa1.saveKeysToFile(username1, username1);
//            rsa2.saveKeysToFile(username2, username2);
//            rsa3.saveKeysToFile(username3, username3);
            rsa_k1.writeToFile("RSA/"+username1+"publicKey", rsa_k1.getPublicKey().getEncoded());
            rsa_k1.writeToFile("RSA/"+username1+"privateKey", rsa_k1.getPrivateKey().getEncoded());
            rsa_k2.writeToFile("RSA/"+username2+"publicKey", rsa_k2.getPublicKey().getEncoded());
            rsa_k2.writeToFile("RSA/"+username2+"privateKey", rsa_k2.getPrivateKey().getEncoded());
            rsa_k3.writeToFile("RSA/"+username3+"publicKey", rsa_k3.getPublicKey().getEncoded());
            rsa_k3.writeToFile("RSA/"+username3+"privateKey", rsa_k3.getPrivateKey().getEncoded());

        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
                    
                    
         System.out.println("User created successfully .....");
         

//                    System.out.printf("%s \t %s \n", "Username: ", username);
//                    System.out.printf("%s \t %s \n", "Password: ", password); 


//                    String text = "My first alert in Java!!!";                       
//                    System.out.printf("%s \t %s \n", "Private key: ", rsa.getPrivateKey());
//                    System.out.printf("%s \t %s \n", "Public key: ", rsa.getPublicKey());
//                    String pr_key = rsa.getPrivateKey().toString();
//                    String pub_key = rsa.getPublicKey().toString();

                    SQLiteDBSystem db = new SQLiteDBSystem();
                    db.connect();
                    db.CreateTable();
//                  String username
//                  Store User identity in databse
                    for(int i = 0; i < USER_LENGTH; i++){  
                        db.InsertUser(userList[i].get(0), userList[i].get(1));
                        
//                        System.out.printf("%s \t %s \n", "Username: ", userList[i].get(0));
//                        System.out.printf("%s \t %s \n", "Private Key: ", userList[i].get(2));
//                        System.out.printf("%s \t %s \n", "Public Key: ", userList[i].get(3));
                    }
//                    db.InsertUser(username1, password1, pr_key, pub_key);
//                    db.InsertUser(username2, password2, pr_key, pub_key);
//                    db.InsertUser(username3, password3, pr_key, pub_key);                
                    
                    System.out.println("User identity stored to database successfully .....");
                    jTxtUserlist.setText(username1 +"\n"+username2 +"\n"+ username3 );
                    
    }//GEN-LAST:event_jbGenerateUserActionPerformed

    private static String getFileSizeKiloBytes(File file) {
            return (double) file.length() / 1024 + "  kb";
    }
    
    private void jLbGenerateLFSRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLbGenerateLFSRActionPerformed
        // TODO add your handling code here:
            Long start = System.currentTimeMillis();
        
            LFSR lfsr = new LFSR();
            lfsr_key = lfsr.Simulate();
            jTextAreaLFSR_key.setText("");
            jTextAreaLFSR_key.setText(lfsr_key);
            Long time = System.currentTimeMillis() - start;            
            jLbKeygenTime.setText(" "+ time);
            jLbKeyLength.setText(" " + lfsr_key.length());        
//            jLbGenerateLFSR.setEnabled(false);
    }//GEN-LAST:event_jLbGenerateLFSRActionPerformed

    private void jButtonEncryptDICOMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEncryptDICOMActionPerformed
  
        File fileToEncrypt = new File(dicom_file_path);
        File encryptedKeyFile = new File("testEncryptedKF.enc");
        File publicKeyFile = new File("public.der");
        File privateKeyFile = new File("private.der");
        File encryptedFile = new File(dicom_file_path+".enc");
        File unencryptedFile = new File("case2a_001_test2.dcm");
        
              
        try {
            NewEncryptionAESRSA secure = new NewEncryptionAESRSA();
            secure.makeKey();

            secure.saveKey(encryptedKeyFile, publicKeyFile);
            secure.encrypt(fileToEncrypt, encryptedFile); 
         } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        

        AESAlgorithm aes = new AESAlgorithm();
        try {
            Long time;
            Long start = System.currentTimeMillis();
            String filenameToSaveEncryptedDicom  = dicom_file_path+".enc";
            enctypted_dicom_file_path = aes.encryptFile(dicom_file_path, filenameToSaveEncryptedDicom, lfsr_key);
            
            time = System.currentTimeMillis() - start;  
            
         jLbEncryptionTime.setText(" " + time);
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        //   db.InsertKeytoDb(lfsr_key);
//        enctypted_dicom_file_path = dicom_file_path+".enc"; 
        File file = new File(enctypted_dicom_file_path);
        if (!file.exists() || !file.isFile()) return;

        jLbFileSizeAfterEncrypted.setText(" " + getFileSizeKiloBytes(file));
        jLbSystemStatus.setText("DICOM file encrypted successfully!!");
        
    }//GEN-LAST:event_jButtonEncryptDICOMActionPerformed

    private void jBtnSaveEncryptedFileDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSaveEncryptedFileDBActionPerformed
        // TODO add your handling code here:
        SQLiteDBSystem db = new SQLiteDBSystem();
        db.connect();
        Random rand = new SecureRandom();
        int fid = rand.nextInt(101);        
        SQLiteDBSystem binary = new SQLiteDBSystem();
        binary.connect();
        try {
            Long start = System.currentTimeMillis();   
            
            db.InsertBinaryData(enctypted_dicom_file_path, fid);
            Long time = System.currentTimeMillis() - start; 
            
            jLbTransferTime.setText(" " + time);
            

            //===== Encrypt LFSR key using each user's public key =====
            for(int i = 0; i < USER_LENGTH; i++){  
                RSA rsa = new RSA();
//                db.InsertKeyDataDb(fid, userList[i].get(0), lfsr_key);
                Long start_2 = System.currentTimeMillis();
                
                String username = userList[i].get(0);
                String public_key_filename = "RSA/"+userList[i].get(0)+"publicKey";
                String publicKey = Base64.getEncoder().encodeToString(RSAAlgorithm.readPubKeyFromFile(public_key_filename));
//                System.out.println("Ky Path: "+lfsr_key);
                cipher_lfsr_key_list[i] = Base64.getEncoder().encodeToString(encrypt(lfsr_key, publicKey));
                
//                cipher_lfsr_key_list[i] = rsa.encrypt(lfsr_key, key_filename);                
//                System.out.printf("%s \t %s \n", "Encrypted LFSR key: ", cipher_lfsr_key_list[i]);
                Long time_2 = System.currentTimeMillis() - start_2;
                jLbEncryTimeforAllUsers.setText(" "+ time_2);
                jLbSystemStatus.setText("LFSR encrypted for "+ username);
            }                  
                    
        //===== Store Encrypted LFSR key using each user's username =====
            Long start_3 = System.currentTimeMillis();
            for(int i = 0; i < USER_LENGTH; i++){ 
                
                db.InsertKeyDataDb(fid, userList[i].get(0), cipher_lfsr_key_list[i]);
             
                jLbSystemStatus.setText("Encrypted LFSR key for successfully for "+userList[i].get(0));
            }
            Long time_3 = System.currentTimeMillis() - start_3;
            jLbTransferTimeforLFSRforAllUsers.setText(" " + time_3);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jBtnSaveEncryptedFileDBActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels=javax.swing.UIManager.getInstalledLookAndFeels();
            for (int idx=0; idx<installedLookAndFeels.length; idx++)
                if ("Nimbus".equals(installedLookAndFeels[idx].getName())) {
                    javax.swing.UIManager.setLookAndFeel(installedLookAndFeels[idx].getClassName());
                    break;
                }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new Main().setVisible(true);
                    
                   
//                    db.InsertData(ecrypted_dicom, text);
                    System.currentTimeMillis();
                    System.nanoTime();
                            
                    System.out.println("");
                    System.out.println("Data preparation starts.....");
                    
                
                } catch (Exception ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }

                

            }
        });
        

    }
    

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBPickDicomFile;
    private javax.swing.JButton jBtnSaveEncryptedFileDB;
    private javax.swing.JButton jButtonEncryptDICOM;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLbEncryTimeforAllUsers;
    private javax.swing.JLabel jLbEncryptionTime;
    private javax.swing.JLabel jLbFileSize;
    private javax.swing.JLabel jLbFileSizeAfterEncrypted;
    private javax.swing.JButton jLbGenerateLFSR;
    private javax.swing.JLabel jLbKeyLength;
    private javax.swing.JLabel jLbKeygenTime;
    private javax.swing.JLabel jLbSystemStatus;
    private javax.swing.JLabel jLbTransferTime;
    private javax.swing.JLabel jLbTransferTimeforLFSRforAllUsers;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextAreaLFSR_key;
    private javax.swing.JTextArea jTxtUserlist;
    private javax.swing.JButton jbGenerateUser;
    private javax.swing.JLabel lbFilePathString;
    // End of variables declaration//GEN-END:variables
    
}
